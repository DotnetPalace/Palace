@page "/"
@{
	var ghostHostList = serviceInfoList.Select(i => i.HostName).Distinct().ToList();
	ghostHostList.RemoveAll(i => hostList.Any(j => j.HostName == i));

	var ghostServiceList = serviceInfoList.ToList();
	ghostServiceList.RemoveAll(i => serviceSettingsList.Any(j => j.ServiceName.Equals(i.ServiceName, StringComparison.InvariantCultureIgnoreCase)));
}

<table class="table table-bordered w-100 h-100">
	<thead>
		<tr>
			<th colspan="2"></th>
			@if (hostList.Count > 0)
			{
				<th colspan="@hostList.Count">
					Hosts
				</th>
			}
			@if (ghostHostList.Count > 0)
			{
				<th colspan="@ghostHostList.Count">
					Offline Hosts
				</th>
			}
		</tr>
		<tr>
			<th>Group</th>
			<th>Serivce Name</th>
			@foreach (var host in hostList.OrderBy(i => i.HostName))
			{
				var hostStyle = host.HostState == Palace.Shared.HostState.Down ? "table-danger" : "";
				<th class="@hostStyle">
					<RunningHostInfo HostInfo="host"/>
				</th>
			}
			@foreach (var ghostHost in ghostHostList.OrderBy(i => i))
			{
				<th>@ghostHost</th>
			}
		</tr>
	</thead>
	<tbody class="table-group-divider">
		@{
			var oldRowSpan = 0;
		}
		@foreach (var service in serviceSettingsList.OrderBy(i => i.GroupName != null ? i.GroupName : "zzzz").ThenBy(i => i.ServiceName))
		{
			var rowSpan = serviceSettingsList.Count(i => i.GroupName == service.GroupName);
			var packageInfo = packageInfoList.SingleOrDefault(i => i.PackageFileName == service.PackageFileName);
			<tr>
				@if (oldRowSpan != rowSpan)
				{
					oldRowSpan = rowSpan;
					<td rowspan="@rowSpan">
						<span>@service.GroupName</span>
					</td>
				}
				<td>
					<ServiceSettingsInfo PackageInfo="packageInfo" ServiceSettings="service" OnSettingSaved="LoadLists"/>
					@* <ActionButton ButtonType="btn-warning">Recycle all hosts</ActionButton> *@
				</td>
				@foreach (var host in hostList.OrderBy(i => i.HostName))
				{
					var serviceInfo = serviceInfoList.SingleOrDefault(i => i.HostName.Equals(host.HostName, StringComparison.InvariantCultureIgnoreCase) && i.ServiceName.Equals(service.ServiceName, StringComparison.InvariantCultureIgnoreCase));
					string serviceStyle = "";
					if (serviceInfo is not null)
					{
						serviceStyle = serviceInfo.ServiceState == ServiceState.Down ? "table-danger" : "";
						serviceStyle = serviceInfo.RemovedDate.HasValue ? "table-danger" : "";
					}
					<td class="@serviceStyle">
						@if (serviceInfo is not null)
						{
							<RunningServiceInfo ServiceInfo="serviceInfo" />
							@if (serviceInfo.ServiceState == ServiceState.Offline
									|| serviceInfo.ServiceState == ServiceState.Updated)
							{
								<div>
									<LongActionButton type="button" ButtonType="btn-primary" CreateLongAction="(() => CreateStartAction(service, serviceInfo))">Start</LongActionButton>
									<LongActionButton type="button" ButtonType="btn-secondary" CreateLongAction="(() => CreateInstallServiceAction(host, service))">ReInstall</LongActionButton>
									<LongActionButton type="button" ButtonType="btn-danger" CreateLongAction="(() => CreateUnInstallServiceAction(host, service))">UnInstall</LongActionButton>
								</div>
							}
							else if (serviceInfo.ServiceState == ServiceState.Running)
							{
								@if (!service.AlwaysStarted)
								{
									<LongActionButton type="button" ButtonType="btn-danger" CreateLongAction="(() => CreateStopAction(serviceInfo))">Stop</LongActionButton>
								}
								<LongActionButton type="button" ButtonType="btn-warning" CreateLongAction="(() => CreateRecycleServiceAction(host.HostName, service))" >Recycle</LongActionButton>
								@if (serviceInfo.ProcessId > 0)
								{
									<LongActionButton type="button" ButtonType="btn-danger" CreateLongAction="(() => CreateKillServiceAction(host.HostName, service))">Kill</LongActionButton>
								}
							}
							else if (serviceInfo.ServiceState == ServiceState.Down)
							{
								<LongActionButton type="button" ButtonType="btn-danger" CreateLongAction="(() => CreateUnInstallServiceAction(host, service))">UnInstall</LongActionButton>
							}
						}
						else
						{
							<LongActionButton type="button" ButtonType="btn-primary" CreateLongAction="(() => CreateInstallServiceAction(host, service))">Install</LongActionButton>
						}
					</td>
				}
				@foreach (var ghostHost in ghostHostList.OrderBy(i => i))
				{
					var serviceInfo = serviceInfoList.SingleOrDefault(i => i.HostName == ghostHost && i.ServiceName == service.ServiceName);
					<td>
						@if (serviceInfo is not null)
						{
							<RunningServiceInfo ServiceInfo="serviceInfo" />
							<LongActionButton type="button" ButtonType="btn-danger" CreateLongAction="(() => CreateStopAction(serviceInfo))">Stop</LongActionButton>
						}
					</td>
				}
			</tr>
		}

		@foreach (var ghostService in ghostServiceList.OrderBy(i => i.ServiceName))
		{
			<tr class="table-secondary">
				<td>
				</td>
				<td>
					@ghostService.ServiceName
					<div>Version : @ghostService.Version</div>
					<div>State : @ghostService.ServiceState</div>
				</td>
				@foreach (var host in hostList.OrderBy(i => i.HostName))
				{
					<td>
						@if (ghostService.HostName == host.HostName)
						{
							<div>
								State : @ghostService.ServiceState
								<small>@ghostService.Log</small>
								<span>@ghostService.FailReason</span>
							</div>
							<div>
								Version : @ghostService.Version
							</div>
							<LongActionButton type="button" ButtonType="btn-danger" CreateLongAction="(() => CreateStopAction(host.HostName, ghostService.ServiceName))">Stop</LongActionButton>
						}
					</td>
				}
			</tr>
		}
	</tbody>
</table>


